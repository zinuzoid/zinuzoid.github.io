{"version":3,"sources":["features/condorServerList/parser.js","features/condorServerList/slice.js","features/condorServerList/table.js","features/condorServerList/CondorServerList.js","App.js","features/condorServerList/sagas.js","app/sagas.js","app/store.js","serviceWorker.js","index.js"],"names":["parseTable","parseHTML","idx","jq","map","_","dom","children","textContent","toArray","slice","createSlice","name","initialState","loading","listData","requestLastTimeSpent","requestLastTimestamp","errorMessage","reducers","fetchList","state","fetchListRequestError","action","Date","now","fetchListRequestSuccess","html","serverStatus","landscape","length","playerNum","isPrivate","result","i","push","parseListHtml","html_body","time_spent","selectLoading","condorServerList","selectErrorMessage","selectListDataFiltered","filter","includes","sort","a","b","cmp","localeCompare","a_num","split","selectRequestLastTimeSpent","selectRequestLastTimestamp","actions","Styles","styled","div","Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","_i","getRowProps","cells","cell","getCellProps","CondorServerList","useSelector","dispatch","useDispatch","useEffect","onFetch","timer","setTimeout","clearTimeout","React","useMemo","Header","accessor","style","color","Math","round","moment","format","onClick","App","className","fetchListSaga","actionWatcher","corsProxy","tStart","performance","fetch","tEnd","put","type","text","console","error","toString","takeLatest","rootSaga","all","middleware","createSagaMiddleware","configureStore","reducer","condorServerListReducer","getDefaultMiddleware","Boolean","window","location","hostname","match","sagaMiddleware","run","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bc272e8.chunk.js","sourcesContent":["import jq from 'jquery'\n\nfunction parseTable(parseHTML, idx) {\n    return jq('tr[id^=table_6_row]', parseHTML).map((_, dom) => dom.children[idx].textContent).toArray()\n}\n\nexport function parseListHtml(html) {\n    const parseHTML = jq.parseHTML(html);\n\n    const name = parseTable(parseHTML, 2)\n    const serverStatus = parseTable(parseHTML, 4)\n    const landscape = parseTable(parseHTML, 5)\n    const length = parseTable(parseHTML, 6)\n    const playerNum = parseTable(parseHTML, 7)\n    const isPrivate = parseTable(parseHTML, 11)\n\n    const result = []\n    for (let i = 0; i < name.length; i++) {\n        result.push({\n            name: name[i],\n            landscape: landscape[i],\n            serverStatus: serverStatus[i],\n            length: length[i],\n            playerNum: playerNum[i],\n            isPrivate: isPrivate[i],\n        })\n    }\n    return result\n}","import {createSlice} from \"@reduxjs/toolkit\";\nimport {parseListHtml} from \"./parser\";\n\nconst slice = createSlice({\n        name: 'condorServerList',\n        initialState: {\n            loading: false,\n            listData: [],\n            requestLastTimeSpent: null,\n            requestLastTimestamp: null,\n            errorMessage: null\n        },\n        reducers: {\n            fetchList: state => {\n                state.loading = true\n                state.errorMessage = null\n            },\n            fetchListRequestError: (state, action) => {\n                state.loading = false\n                state.errorMessage = action.errorMessage\n                state.requestLastTimestamp = Date.now()\n            },\n            fetchListRequestSuccess: (state, action) => {\n                state.loading = false\n                state.errorMessage = null\n                state.listData = parseListHtml(action.html_body)\n                state.requestLastTimeSpent = action.time_spent\n                state.requestLastTimestamp = Date.now()\n            }\n        }\n    }\n)\n\nexport const selectLoading = state => {\n    return state.condorServerList.loading\n}\n\nexport const selectErrorMessage = state => {\n    return state.condorServerList.errorMessage\n}\n\nexport const selectListData = state => {\n    return state.condorServerList.listData\n}\n\nexport const selectListDataFiltered = state => {\n    return state.condorServerList.listData\n        .filter(i => i.isPrivate === 'No' &&\n            (i.landscape.includes('Slovenia') || i.landscape.includes('South East UK')) &&\n            i.serverStatus.includes('Join')\n        ).sort((a, b) => {\n            const cmp = a.landscape.localeCompare(b.landscape)\n            if (cmp !== 0) return cmp\n\n            const a_num = a.playerNum.includes('/') ? a.playerNum.split('/')[0] : a.playerNum\n            const b_num = b.playerNum.includes('/') ? b.playerNum.split('/')[0] : b.playerNum\n            return b_num - a_num\n        })\n}\n\nexport const selectRequestLastTimeSpent = state => {\n    return state.condorServerList.requestLastTimeSpent\n}\n\nexport const selectRequestLastTimestamp = state => {\n    return state.condorServerList.requestLastTimestamp\n}\n\nexport const {fetchList, fetchListRequestError, fetchListRequestSuccess} = slice.actions\n\nexport default slice.reducer","import React from 'react'\nimport styled from 'styled-components'\nimport {useTable} from 'react-table'\n\nexport const Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({columns, data}) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    })\n\n    // Render the UI for your table\n    return (\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, _i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table\n","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {\n    selectLoading,\n    fetchList,\n    selectErrorMessage,\n    selectRequestLastTimeSpent,\n    selectRequestLastTimestamp, selectListDataFiltered\n} from \"./slice\";\nimport {MoonLoader} from \"react-spinners\";\nimport Table, {Styles} from \"./table\";\nimport moment from \"moment\";\n\nexport function CondorServerList() {\n    const requestLastTimeSpent = useSelector(selectRequestLastTimeSpent);\n    const requestLastTimestamp = useSelector(selectRequestLastTimestamp);\n    const dispatch = useDispatch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(onFetch, [])\n    useEffect(() => {\n            const timer = setTimeout(() => {\n                onFetch()\n            }, 60000)\n            return () => clearTimeout(timer)\n        }\n        , [requestLastTimestamp])\n\n    const columns = React.useMemo(() => [\n        {\n            Header: 'Name',\n            accessor: 'name',\n        }, {\n            Header: 'Landscape',\n            accessor: 'landscape',\n        }, {\n            Header: 'ServerStatus',\n            accessor: 'serverStatus',\n        }, {\n            Header: 'Task',\n            accessor: 'length',\n        }, {\n            Header: 'Players',\n            accessor: 'playerNum',\n        }, {\n            Header: 'Private',\n            accessor: 'isPrivate',\n        },\n    ], [])\n\n    function onFetch() {\n        dispatch(fetchList())\n    }\n\n    return <div>\n        <h1>Condor</h1>\n        <p style={{color: 'red'}}>{useSelector(selectErrorMessage)}</p>\n        <span>\n            <MoonLoader loading={useSelector(selectLoading)}/>\n        </span>\n        {requestLastTimeSpent &&\n        <p>{Math.round(requestLastTimeSpent)}ms / {moment(requestLastTimestamp).format('MMMM Do YYYY, h:mm:ss a')}</p>}\n        <button onClick={onFetch}>Fetch</button>\n        <Styles>\n            <Table columns={columns} data={useSelector(selectListDataFiltered)}/>\n        </Styles>\n    </div>\n}","import React from 'react';\r\nimport './App.css';\r\nimport {CondorServerList} from \"./features/condorServerList/CondorServerList\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <CondorServerList/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {put, takeLatest} from 'redux-saga/effects';\nimport {fetchList, fetchListRequestError, fetchListRequestSuccess} from \"./slice\";\n\nfunction* fetchListSaga() {\n    try {\n        const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n        const url = corsProxy + 'https://www.condorsoaring.com/serverlist/?wdt_search=cndr2';\n        const tStart = performance.now()\n        const html = yield fetch(url, {\n            headers: {\n                'X-Requested-With': 'node'\n            }\n        })\n        const tEnd = performance.now()\n        yield put({type: fetchListRequestSuccess.type, html_body: yield html.text(), time_spent: tEnd - tStart})\n    } catch (e) {\n        console.error(e)\n        yield put({type: fetchListRequestError.type, errorMessage: e.toString()})\n    }\n}\n\nexport function* actionWatcher() {\n    yield takeLatest(fetchList.type, fetchListSaga)\n}\n","import {actionWatcher} from \"../features/condorServerList/sagas\";\nimport {all} from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\n\nexport function* rootSaga() {\n    yield all([\n        actionWatcher(),\n    ]);\n}\n\nexport const middleware = createSagaMiddleware();","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport condorServerListReducer from '../features/condorServerList/slice';\r\nimport {middleware} from \"./sagas\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        condorServerList: condorServerListReducer\r\n    },\r\n    middleware: [middleware, ...getDefaultMiddleware()]\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {rootSaga, middleware as sagaMiddleware} from \"./app/sagas\";\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}